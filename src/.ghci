
{- -*- Mode: Haskell -*- -}

-- -----------------------------------------------------------------------------
--  Language                                                                    
-- -----------------------------------------------------------------------------

:set -XNamedFieldPuns
:set -XRecordWildCards
:set -XMultiParamTypeClasses
:set -XFlexibleInstances
:set -XOverlappingInstances
:set -XFlexibleContexts
:set -XTypeSynonymInstances
:set -XScopedTypeVariables
:set -XViewPatterns
:set -XPatternGuards
:set -XFunctionalDependencies
:set -XUnicodeSyntax
:set -XGeneralizedNewtypeDeriving
:set -XUndecidableInstances
:set -XRank2Types
:set -XEmptyDataDecls
:set -XForeignFunctionInterface
:set -XNamedFieldPuns
:set -XDeriveDataTypeable
:set -XTemplateHaskell
:set -XQuasiQuotes
:set -XCPP
:set -XNoImplicitPrelude

:set -i/usr1/seanmcl/save/projects/atp/src
:set -i/Users/sean/save/projects/atp/src
:set -optL -q

-- :set -v

-- :set -fobject-code
:set -fbreak-on-exception

-- :set args "cvc" "⊤"
-- :set -lcvc3 -lcvch

-- -----------------------------------------------------------------------------
--  Options                                                                      
-- -----------------------------------------------------------------------------

:set +t
-- :set prompt "> "
:set prompt "Prelude> "

-- -----------------------------------------------------------------------------
--  Functions                                                                   
-- -----------------------------------------------------------------------------

-- :{
-- let date _ = do { t <- Time.getClockTime 
--                 ; print t
--                 ; return "" }
-- :}

-- :def date date

-- -----------------------------------------------------------------------------
--  Test                                                                        
-- -----------------------------------------------------------------------------

-- :def sm (\_ -> return ":stepmodule")

-- :def imodule (\_ -> return ":module ATP.Util.Print") 

-- -----------------------------------------------------------------------------
--  File loading                                                                
-- -----------------------------------------------------------------------------

-- :load ATP.Util.Print
-- :module +ATP.Util.Print

-- -----------------------------------------------------------------------------
--  Tmp                                                                         
-- -----------------------------------------------------------------------------

-- :break testform
-- :break condense
-- :break inferisign
-- :break dedmatrix
-- :break pdividePos
-- :break splitSign
-- :break splitTrichotomy
-- :break caseSplit
-- :break delConst
-- :break matrix
-- :break basicQelim

-- qelim [$form| ∃ x. x^2 = 0 |]
